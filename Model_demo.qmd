---
title: "Coding Demo"
format: html
editor: visual
---

Load in the packages
```{r}
library(tidyverse)
library(tidymodels)
```

Data URL
```{r}
covid_url <- 'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv'

pop_url <- 'https://www2.census.gov/programs-surveys/popest/datasets/2020-2023/counties/totals/co-est2023-alldata.csv'
```

Read data
```{r}
# Covid-19
data <- readr::read_csv(covid_url, show_col_types = FALSE)

# Census
census <- readr::read_csv(pop_url, show_col_types = FALSE) %>% 
  filter(COUNTY == "000") %>% 
  mutate(fips = STATE) %>% 
  select(fips, contains("2021"))
```

data cleaning
```{r}
state_data <- data %>% 
  group_by(fips) %>% 
  mutate(new_case = pmax(0, cases - lag(cases)),
         new_deaths = pmax(0, deaths - lag(deaths))
         ) %>% 
  ungroup() %>% 
  left_join(census, by = "fips") %>% 
  mutate(m = month(date), y = year(date),
         season = case_when(
           m %in% 3:5 ~ "Spring",
           m %in% 6:8 ~ "Summer",
           m %in% 9:11 ~ "Fall",
           m %in% c(12,1,2) ~ "Winter"
         )) %>% 
  group_by(state, y, season) %>% 
  mutate(season_cases = sum(new_case, na.rm = TRUE),
         season_deaths = sum(new_deaths, na.rm = TRUE)) %>% 
  distinct(state, y, season, .keep_all = TRUE) %>% 
  ungroup() %>% 
  drop_na() %>% 
  mutate(logC = log(season_cases + 1)) %>% 
  select(logC, contains("season"), POPESTIMATE2021, DEATHS2021, BIRTHS2021)

skimr::skim(state_data)
```

Data Splitting
```{r}
# Set a seed
set.seed(123)

spit <- initial_split(state_data, prob = .8,
                     strata = season)

s_train <- training(split)
s_testing <- testing(split)
s_fold <- vfold_cv(s_train, v = 10)
```

Feature Engineering
```{r}
rec <- recipe(logC ~., data = s_train) %>% 
  step_rm(season_case, state) %>% 
  step_dummy(all_nominal_predictors()) %>% 
  step_scale(all_nominal_predictors()) %>% 
  step_center(all_nominal_predictors())
```

Define Models
```{r}
lm_mod <- linear_reg() %>% 
  set_engine("lm") %>% 
  set_mode("regression")

rm_mod <- rand_forest() %>% 
  set_engine("ranger", importance = "impurity") %>% 
  set_mode("regression")

b_mod <- boost_tree() %>% 
  set_engine("xgboost") %>% 
  set_mode("regression")

nlp_mod <- nlp() %>% 
  set_engine("nnet") %>% 
  set_mode("regression")
```

Workflow Set
```{r}
wf <- workflow_set(list(rec), list(lm_mod, rm_mod, b_mod, nlp_mod)) %>% 
  workflow_map(wf, resamples = s_folds)

wf
```

Select
```{r}
autoplot(wf) +
  theme_linedraw()
```

```{r}
fit <- workflow() %>% 
  add_recipe(rec) %>% 
  add_model(rm_mod) %>% 
  fit(data = s_train)
```

VIP
```{r}
vip::vip(fit)
```

Metrics / predictions
```{r}
predictions <- augment(fit, new_data = s_testing)
```

```{r}
metrics(predictions, truth = logC, estimate = .pred)
```

```{r}
ggplot(predictions, aes(x = logC, y = .pred))+
  geom_point()+
  geom_abline()+
  geom_smooth(method = "lm")+
  labs(
    x = "Observation",
    y = "Prediction"
  )+
  theme_linedraw()
```

